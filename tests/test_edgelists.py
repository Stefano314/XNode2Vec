import numpy as np
import pandas as pd
import networkx as nx
from Xnode2vec import complete_edgelist, stellar_edgelist, generate_edgelist, edgelist_from_csv

import pytest
from hypothesis import given, strategies as st

np.random.seed(42)

@given(st.integers(2,30),st.integers(2,30))
def test_complete_dimension(rows, columns):
    """
    Description
    -----------
    Test of complete_edgelist() function.
    Checks if the length of the edgelist generated by complete_edgelist() is equal to the number of points of the
    dataset squared.
    """
    dataset = np.random.rand(rows,columns)
    assert len(complete_edgelist(dataset).index) == dataset.shape[0]**2

@given(st.integers(2,30),st.integers(2,30))
def test_stellar_dimension(rows, columns):
    """
    Description
    -----------
    Test of stellar_edgelist() function.
    Checks if the length of the edgelist generated by stellar_edgelist() is equal to the number of points of the
    dataset.
    """
    dataset = np.random.rand(rows,columns)
    assert len(stellar_edgelist(dataset).index) == dataset[:,0].size

@given(st.integers(2,30),st.integers(2,30))
def test_complete_zeroweight(rows, columns):
    """
    Description
    -----------
    Test of complete_edgelist() function.
    Checks if the weights of a dataset with zero distance between all the points is 1, except for the self links that
    must be 0.
    """
    dataset = np.ones((rows, columns))
    df = complete_edgelist(dataset)
    unique, counts = np.unique(df['weight'].values, return_counts = True)
    assert counts[0] == rows # Number of self links
    assert counts[1] == rows**2 - rows # The rest of the links

def test_complete_generic_weights():
    """
    Description
    -----------
    Test of complete_edgelist() function.
    Checks if the edgelist has the expected weights.
    """
    dataset = np.array([[1,   1,   1],
                        [3,   2,   1],
                        [0.2, 0.4, 7]])
    distances = distance.cdist(dataset, dataset, 'euclidean')
    distances = np.exp(-distances)
    np.fill_diagonal(distances, 0)
    distances = distances.flatten()
    df = complete_edgelist(dataset, metric='euclidean')
    assert np.array_equal(df['weight'].values, distances)
    
def test_complete_different_metrics():
    """
    Description
    -----------
    Test of complete_edgelist() function.
    Checks if the weights assigned by two different metrics are different.
    """
    dataset = np.array([[1,   1,   1],
                        [3,   2,   1],
                        [0.2, 0.4, 7]])
    df1 = complete_edgelist(dataset, metric='jaccard')
    df2 = complete_edgelist(dataset, metric='euclidean')
    assert not np.array_equal(df1['weight'].values, df2['weight'].values)
    
@given(st.integers(2,30),st.integers(2,30))
def test_stellar_zeroweight(rows, columns):
    """
    Description
    -----------
    Test of stellar_edgelist() function.
    Checks the data types of the produced list for the stellar_edgelist function.
    """
    expected_weights = np.ones(rows)
    dataset = np.zeros((rows, columns))
    assert np.array_equal(stellar_edgelist(dataset).loc[:,'weight'].values, expected_weights)

def test_stellar_generic_weights():
    """
    Description
    -----------
    Test of stellar_edgelist() function.
    Checks if the edgelist has the expected weights.
    """
    dataset = np.array([[1,   1,   1],
                        [3,   2,   1],
                        [0.2, 0.4, 7]])
    df = stellar_edgelist(dataset)
    assert np.array_equal(df['weight'].values, np.exp(-np.linalg.norm(dataset, axis = 1)))
    
@given(st.integers(2,30),st.integers(2,30))
def test_complete_checktypes(rows, columns):
    """
    Description
    -----------
    Test of complete_edgelist() function.
    Checks the data types of the produced list for the complete_edgelist() function.
    """
    dataset = np.zeros((rows, columns))
    df = complete_edgelist(dataset)
    assert all(isinstance(item, str) for item in df['node1'].values)
    assert all(isinstance(item, str) for item in df['node2'].values)
    assert all(isinstance(item, float) for item in df['weight'].values)

@given(st.integers(2,30),st.integers(2,30))
def test_complete_stretch(rows, columns):
    """
    Description
    -----------
    Test of complete_edgelist() function.
    Checks if the assigned weights are all 0 if 'stretch' parameter is 0.0001 -- zero. The expected vector has dimension
     'row**2', since it represents a completely connected network.
    """
    dataset = np.random.rand(rows, columns)
    df = complete_edgelist(dataset, stretch = 0.0001)
    assert np.array_equal(np.round(df['weight'].values, decimals = 10), np.zeros(rows**2))
    
@given(st.integers(2,30),st.integers(2,30))
def test_stellar_checktypes(rows, columns):
    """
    Description
    -----------
    Test of stellar_edgelist() function.
    Checks the data types of the produced list for the stellar_edgelist() function.
    """
    dataset = np.zeros((rows, columns))
    df = stellar_edgelist(dataset)
    assert all(isinstance(item, str) for item in df['node1'].values)
    assert all(isinstance(item, str) for item in df['node2'].values)
    assert all(isinstance(item, float) for item in df['weight'].values)

@given(st.integers(2,30))
def test_nxedgelist_samenode(rows):
    """
    Description
    -----------
    Test of generate_edgelist() function.
    Checks if inserting the same point will produce a network of dimension 1.
    """
    narray = np.ones((rows, 3))
    df = pd.DataFrame(narray, columns = ['node1', 'node2', 'weight'])
    df = generate_edgelist(df)
    G = nx.Graph()
    G.add_weighted_edges_from(df)
    assert len(list(G.nodes)) == 1

def test_from_csv():
    """
    Description
    -----------
    Test of edgelist_from_csv() function.
    Checks if the inserted .csv file produces the expected edgelist.
    """
    edgelist = edgelist_from_csv('generic_edgelist.csv')
    assert edgelist == [('1','2',0.7),('1','4',5),('2','3',3),('2','4',1.7)]
